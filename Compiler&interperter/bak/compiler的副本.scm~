#lang scheme
(require r5rs)
(require racket/trace)

(define SS 30) ;stackSize 10


(define (compile x e s next)
  (cond
    [(symbol? x)
     (let ((nxt (if (set-member? x s)
                    (list 'indirect next)
                    next)))
       (compile-lookup x e
                       (lambda (n m)
                         (list 'refer-local n m nxt))
                       (lambda (var)
                         (list 'refer-free var nxt))))]
    [(pair? x)
       (case (car x)
         [(quote) ;(obj) (cadr x)
          (list 'constant (cadr x) next)]
         
         [(define) ;var (cadr x) val (caddr x)
          (list 'def (cadr x) (compile (caddr x) e s next))] 
                     

         [(begin)
          (letrec ((loop (lambda(exps)
                           (if (null? (cdr exps))
                               (compile (car exps) e s next)
                               (compile (car exps) e s (loop (cdr exps)))))))
            (loop (cdr x)))]
         

         [(lambda) ;(vars body)
          (let* ([vars (cadr x)]
                 [body (caddr x)]
                 [sets (find-sets body vars)])
            (list 'close
                  (make-boxes sets vars
                              (compile body
                                       (extend e vars)
                                       (set-union sets s)
                                       (list 'return (+ (length vars) 1))))
                  next))]
         [(if) ;(test then else)
          (let ((test (cadr x))
                (then (caddr x))
                (else (cadddr x)))
            (let ([thenc (compile then e s next)]
                  [elsec (compile else e s next)])
              (compile test e s (list 'test thenc elsec))))]
         [(set!)
          (let ((var (cadr x))
                (x (caddr x)))
            (compile-lookup var e
                            (lambda (n m)
                              (compile x e s (list 'assign-local n m next)))
                            (lambda (var)
                              (compile x e s (list 'assign-free var next)))))]

         [else
          (letrec ((loop (lambda (args c)
                           (if (null? args)
                               (list 'frame next c)
                               (loop (cdr args)
                                     (compile (car args)
                                              e
                                              s
                                              (list 'argument c)))))))
            (loop (cdr x) (compile (car x) e s (list 'apply (length (cdr x))))))]
         
         

         )]
         
        
      [else
       (list 'constant x next)]))


(define (compile-lookup var e return-local return-free)
    (letrec ((nxtrib (lambda(e rib)
      (if (null? e)
          (return-free var)
          (begin 
            (letrec ((nxtelt (lambda(vars elt)
               (cond
                 [(null? vars) (nxtrib (cdr e) (+ rib 1))]
                 [(eq? (car vars) var) (return-local rib elt)]
                 [else (nxtelt (cdr vars) (+ elt 1))]))))
              (nxtelt (car e) 0)))))))
      
      (nxtrib e 0)))

(define (find-sets x v)
    (cond
      [(symbol? x) '()]
      [(pair? x)
       (let ((t (car x)))
         (case t ;;;;;;;;;
           [(quote) '()]
           [(lambda) 
            (find-sets (caddr x) (set-minus v (cadr x)))]
           [(if)   ;; test (cadr x)  (then (caddr x)  else (cadddr x)
            (set-union (find-sets (cadr x) v)
                       (set-union (find-sets (caddr x) v)
                                  (find-sets (cadddr x) v)))]
           [(set!)   ;;var (cadr x) x (caddr x)
            (set-union (if (set-member? (cadr x) v) (list (cadr x)) '())
                       (find-sets (caddr x) v))]
           [else
            (letrec ((next (lambda (x)
                             (if (null? x)
                                 '()
                                 (set-union (find-sets (car x) v)
                                            (next (cdr x)))))))
              (next x))]))]
      [else '()]))

(define (make-boxes sets vars next)
  (letrec ((f (lambda (vars n)
                (if (null? vars)
                    next
                    (if (set-member? (car vars) sets)
                        (list 'box n (f (cdr vars) (+ n 1)))
                        (f (cdr vars) (+ n 1)))))))
    (f vars 0)))

(define (set-member? x s) ;判断元素x是否在集合s里
  (cond
    [(null? s) #f]
    [(eq? x (car s)) #t]
    [else (set-member? x (cdr s))]))
(define (set-cons x s)   ;将元素x加入集合s里 无重复
  (if (set-member? x s)
      s
      (cons x s)))
(define (set-union s1 s2) ;合并两个集合 无重复
  (if (null? s1)
      s2
      (set-union (cdr s1) (set-cons (car s1) s2))))
(define (set-minus s1 s2) ;s1 - s2 集合做差
  (if (null? s1)
      '()
      (if (set-member? (car s1) s2)
          (set-minus (cdr s1) s2)
          (cons (car s1) (set-minus (cdr s1) s2)))))
(define (set-intersect s1 s2) ;找出共同元素
  (if (null? s1)
      '()
      (if (set-member? (car s1) s2)
          (cons (car s1) (set-intersect (cdr s1) s2))
          (set-intersect (cdr s1) s2))))


(define (reverselist ls)
  (define (reverse ls acc)
    (if (null? ls)
        acc
        (reverse (cdr ls) (cons (car ls) acc))))
  (reverse ls '()))

   

(define extend
  (lambda (e r)
    (cons r e)))

(define VM
  (lambda (a x e s)
    (display x) (newline)
    (display stack) (newline)
;    (display s) (newline)
;    (display a) (newline)
    
    (case (car x)
      [(halt)  a]
      [(empty) 'ok]
      [(refer-local) ;(n m x) (cadr x) (caddr x) (cadddr x)
       (VM (index (find-link (cadr x) e) (caddr x)) (cadddr x) e s)]

      [(def) ;var (cadr x) val (caddr x)  ; {def f {close {refer-local 0 0 {return 2}} {halt}}}
       (let ((ret (if (eq? 'close (car (caddr x)))
                      (list 'function (car (caddr x)) (cadr (caddr x)) (list 'apply 0)) 
      ; (let ((ret (if (eq? 'close (car (caddr x)))
      ;                (cons 'function (caddr x))
                      (VM a (caddr x) e s))))
         (set! GE (cons (cons (cadr x) ret ) GE)))]

      [(refer-free) ;var (cadr x) next (caddr x)
       (display (find-free (cadr x))) (newline)
       (VM (find-free (cadr x)) (caddr x) e s)]
      [(indirect)     ;; x: (cadr x)
       (VM (unbox a) (cadr x) e s)]
      [(constant) ;(obj x) (cadr x) (caddr x)
       (VM (cadr x) (caddr x) e s)]  
      [(close) ;body : (cadr x) x : (caddr x) define
      ; (if (eq? 'apply (car (caddr x)))

           (VM (closure (cadr x) e) (caddr x) e s)

          ; (VM x (caddr x) e s)
          ; )
       ]
      [(box)          ;;n:  (cadr x) x: (caddr x)
       (index-set! s (+ (cadr x)  1) (box (index s (+  (cadr x)  1))))
       (VM a (caddr x) e s)]
      [(test) ;(then else) (cadr x) (caddr x)
       (VM a (if a (cadr x) (caddr x)) e s)]
      [(assign-local)  ;; n: (cadr x) x: (caddr x)
       (set-box! (index (find-link (cadr x) e) (caddr x)) a)
       (VM a (cadddr x) e s)]
      [(frame) ;ret  (cadr x)  x next (caddr x)
       (display 'create_frame:) (display s)(newline)
       (let ((stackpointer (push (cadr x) (push e s))))
         (display stack) (newline)
         (newline)
         (VM a (caddr x) e stackpointer ))]
      
      [(argument) ;(x) (cadr x)
       (display 'argument:)(display a) (newline)
       (display 'stack:)(display s) (newline)
        (display stack)(newline)
        (newline)
        
        (VM a (cadr x) e (push a s))]

      
      [(apply) ;body (car a) link (cadr a)
       (display a) (newline)
       (cond
         [(eq? 'primitive (car a))
          (display 'frame_finished:) (display (- s 1)) (newline)
          
          (letrec ((loop (lambda(argl n)
                           (cond
                             [(= n 0) (VM (apply (cdr a) argl)
                                          (index (- s  (cadr x)) 0)
                                          (index (- s  (cadr x)) 1)
                                          (- (- s (cadr x)) 2))]
                             [else  (loop (cons (index s (- n 1)) argl) (- n 1))]))))
            (loop '() (cadr x)))]
         
         [(eq? 'function (car a))
          (VM a (cdr a) e s)]
          ;(if (eq? 'frame (car (cadr a)))
          ;    (VM a (cadr a) e s)
          ;    (VM a (cadr (cadr a)) e (push e s)))]
         [else
          (display "else:::::")(display (cadr a)) (newline)
          (VM a (car a) s (push (cadr a) s))]
         )]
      
      [(return) ;(n) (cadr x)
       (display 'frame_finished:) (display (- s 1)) (newline)
      ; (display stack) (newline)
       (let ([s (- s (cadr x))])
         (VM a (index s 0) (index s 1) (- s 2)))]
      
      ;[else (display x) (newline) (error 'unknow_return)]
      )))

(define index
  (lambda (s i)
    (vector-ref stack (- (- s i) 1))))
(define index-set!
  (lambda (s i v)
    (vector-set! stack (- (- s i) 1) v)))
(define (find-link n e)
    (if (= n 0) e
        (find-link (- n 1) (index e -1))))
(define closure
  (lambda (body e)
    (list body e)))

(define (primitive-apply fun n s)
  (letrec ( (loop (lambda (num argl)
                    (if (= num 0)
                        (apply fun argl)
                        (loop (- 1 num) (index s num))))))
    (loop n '())))

(define (find-free1 var)
  (letrec ((loop (lambda (env)
                   (cond
                     [(eq? (car (car env)) var) (list 'free-varable (cdr (car env)))]
                     [(loop (cdr env))]
                     [(null? env) (error 'Undefined_varable--find-free)]))))
    (loop GE)))

(define (find-free var)
  (letrec ((loop (lambda (env)
                   (cond
                     [(eq? (car (car env)) var)  (cdr (car env))]
                     [(loop (cdr env))]
                     [(null? env) (error 'Undefined_varable--find-free)]))))
    (loop GE)))




;;
;; 栈操作定义
;;
(define stack (make-vector SS))
(define (push x s)
  (vector-set! stack s x)
  (+ s 1))



(define GE (map (lambda (a b) (cons a b))
                 (list '+ '- '* '/ '= )
                 (map (lambda (f) (cons 'primitive f))
                         (list + - * / =))
                 ;(list + - * / =  )
                 ))


(define evaluate
  (lambda (x)
    (VM '() (compile x '() '() '(halt)) '()  0 )))

(define run evaluate)

(define (test x)
  (compile x '() '() '(halt)))

;(run '((lambda(a) a) 1))
;(run '((lambda (a) ((lambda(b) a )  (set! a 1))) 99))
;(run '(define g (lambda(a)
;                   (lambda ()
;                    ((lambda (set)
;                       a)
;                     (set! a (+ a 1)))
;                    ))))



(run '(define f (lambda (a) (lambda () a))))

(run '(define g (f 10)))

{close {close {refer-local 1 0 {return 1}} {return 2}} {apply 0}}

{close {refer-local 1 0 {return 1}} {return 2}} . val
















