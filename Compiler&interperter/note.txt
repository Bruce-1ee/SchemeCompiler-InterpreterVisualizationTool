

((lambda () (let ((make-closure
        (lambda (num)
          (lambda () num))))
  (let ((c1 (make-closure 10))
       (c2 (make-closure 20)))
  (c1)))))


((lambda (f1 f2) ((lambda() (f2))) ) (lambda (arg) arg) (lambda() 999))

(eval1 '((lambda (make-closure)
   ((lambda (c1 c2) (c1))
    (make-closure 10)
    (make-closure 20)))
 (lambda (num) (lambda () num))))

'((lambda (make-closure)
   ((lambda (c1 c2) (make-closure 999))
    (make-closure 10)
    (make-closure 20)))
 (lambda (num) (lambda () num)))

'((lambda (make-closure)
   ((lambda (c1) (c1))
    (make-closure 10)))
 (lambda (num) (lambda () num)))


((lambda (a) a) ((lambda() 99)))

((lambda (c) (c))
((lambda(num) (lambda() num)) 99))



;3.2.2  Applying Simple Procedures
(meta '((lambda (square)
   ((lambda (sum-of-squares)
      ((lambda(a)
         (sum-of-squares (+ a 1) (* a 2))) 5))
      (lambda(x y) (+ (square x) (square y)))))
 (lambda(x) (* x x))))

;3.2.3  Frames as the Repository of Local State
(meta '((lambda(make-withdraw) ((make-withdraw 100) 99))
(lambda(balance)
  (lambda (amount)
    (if (>= balance amount)
        ;set! ......
        (- balance amount)
        "Insufficient funds")))))

(meta '((lambda (fact n)
   (fact fact n))
 (lambda (self n)
   (if (= n 0)
       1
       (* n (self self (- n 1)))))
 5))
 


完成:
   1.


(define (make-arg-str name str)
   (string-append "<" str (number->string (+ 1 num)) ">"))
)


(define (make-short-argument arg)
   (cond ((not (eq? -1 (get-box-num arg box-table)))

   )

 )


 (define (f n)
   (if (> n 0)
      (f (- n 1))
      199)
 )